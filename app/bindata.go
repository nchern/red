// Code generated by go-bindata.
// sources:
// assets/template.txt
// DO NOT EDIT!

package app

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x4f\x4b\xf3\x40\x10\xc6\xef\xfb\x29\x9e\x37\x39\xf4\xf2\x4a\xab\x37\x43\x08\x3d\x18\xad\xa0\x54\xa4\x9e\x65\x9a\x4e\x9a\xa5\x9b\x6c\x3a\xb3\xa9\x56\xe9\x77\x97\x24\x2a\x78\xd1\xcb\xc2\xfc\x9e\x3f\x3b\x13\xff\x13\xde\xe0\x0c\x35\xc9\x4e\x51\x5a\xc7\x78\xb1\xa1\x82\x70\xe1\xb7\x8d\x55\x5a\x3b\x46\x38\xb6\x8c\xd2\x0b\x8e\xbe\x13\xf0\xc6\x06\x2f\xc6\xcc\x9d\x2f\xc8\x55\x5e\x43\x72\x79\x31\x9b\x19\x13\x63\x91\xdf\x3d\x24\x26\xc6\x64\x9e\xf6\xbc\xa1\x9a\xb3\x41\x9c\x80\x02\x42\xc5\x58\xf3\xd6\x36\xb6\xd9\xc2\x97\x20\x38\xdb\x30\x94\x83\x42\x59\x0e\x2c\x18\xda\x5a\x2f\x01\xc1\xa3\xa6\x1d\x43\x78\xdf\xb1\xf6\xb3\x89\x91\xde\xe7\xab\xc5\xf2\x2a\xc3\xb4\xf4\x7e\xba\x26\xf9\xab\xf6\x2b\x3d\xe6\xa6\x4f\x8f\xb7\xa0\xe1\x92\x3e\xb4\xef\x58\x8e\x26\x46\x96\x65\xf9\xf2\x3a\x4d\xd3\xdf\xda\x82\x6f\x15\x2d\x89\xf6\xbc\x37\xa9\xef\xa4\x60\xd3\x9f\x9d\xbf\x52\xdd\x3a\xee\xed\xb9\x23\x0d\xb6\x50\x26\x29\xaa\xcf\x1f\xcc\x4d\xbe\x1a\x37\x7e\x1e\xb9\x79\x37\x00\x10\xa9\x7d\xe3\x28\xc1\xf9\xec\xff\x38\x0f\xf6\x28\xc1\x28\x0f\x28\xb0\xd4\x3f\xc8\x40\x4b\xcb\x6e\x13\x25\x88\x0e\xe4\x3a\x8e\xbe\xc5\x93\x19\xdf\x93\xf9\x08\x00\x00\xff\xff\x01\x2c\xa5\xef\xd8\x01\x00\x00")

func assetsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplateTxt,
		"assets/template.txt",
	)
}

func assetsTemplateTxt() (*asset, error) {
	bytes, err := assetsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/template.txt", size: 472, mode: os.FileMode(420), modTime: time.Unix(1587505107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/template.txt": assetsTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"template.txt": &bintree{assetsTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

